{"version":3,"sources":["Component/Card.js","Component/CardList.js","Component/Searchbox.js","Component/Scroll.js","Component/ErrorBoundary.js","Container/App.js","action.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","Searchbox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","HasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","Response","json","data","catch","initialStatesearch","initialStaterobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2df07552.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id , name, email})=>{\r\n    return(\r\n        <div className=\" tc bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow \">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <div>\r\n                <p className=\"f3\">{name}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({onSearchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='Search robots'\r\n        onChange={onSearchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n    <div style={{ overflow : 'scroll', border:'1px solid black', height:'500px'}}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            HasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({HasError:true})\r\n    }\r\n\r\n    render(){\r\n\r\n      if(this.state.HasError){\r\n          return <h1>oh noooo</h1>\r\n      }\r\n      return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Component/CardList';\r\nimport SearchBox from '../Component/Searchbox';\r\nimport Scroll from '../Component/Scroll';\r\nimport ErrorBoundary from '../Component/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../action';\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchField : state.searchRobots.searchField,\r\n        robots : state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error : state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = () => (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n      \r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending?     <h1>Loading</h1>\r\n        :    \r\n            <div className=\"f3 tc bw2 ma5\">\r\n                    <h2 className='title'>Robofriends</h2>\r\n                    <SearchBox onSearchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                    </Scroll>\r\n    \r\n            </div>\r\n        }        \r\n    }\r\n\r\n\r\n export  default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots = ()=> (dispatch)=>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(Response => Response.json())\r\n            .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n            .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst initialStatesearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStatesearch,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStaterobots = {\r\n    isPending : false,\r\n    robots : [],\r\n    error : ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStaterobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots : action.payload, isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error : action.payload,isPending: true});\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './Container/App';\nimport {searchRobots, requestRobots} from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}